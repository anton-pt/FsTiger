// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast
open Symbol
open Microsoft.FSharp.Text.Lexing

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | INT_LIT of (System.Int32)
  | STRING_LIT of (string)
  | ID of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | ASSIGN
  | EQ
  | NEQ
  | GTEQ
  | LTEQ
  | GT
  | LT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | DOT
  | COMMA
  | COLON
  | SEMI
  | TYPE
  | VAR
  | FUNCTION
  | INT
  | STRING
  | ARRAY
  | OF
  | NIL
  | LET
  | IN
  | END
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | FOR
  | TO
  | BREAK
  | LOWPREC
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INT_LIT
    | TOKEN_STRING_LIT
    | TOKEN_ID
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_GTEQ
    | TOKEN_LTEQ
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMI
    | TOKEN_TYPE
    | TOKEN_VAR
    | TOKEN_FUNCTION
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_ARRAY
    | TOKEN_OF
    | TOKEN_NIL
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_LOWPREC
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Oper
    | NONTERM_TypeId
    | NONTERM_Var
    | NONTERM_ComplexVar
    | NONTERM_Exp
    | NONTERM_SeqExp
    | NONTERM_ExpList
    | NONTERM_RecordFieldList
    | NONTERM_Dec
    | NONTERM_DecList
    | NONTERM_FunDec
    | NONTERM_FunDecs
    | NONTERM_VarDec
    | NONTERM_TypeDec
    | NONTERM_TypeDecs
    | NONTERM_Ty
    | NONTERM_TypeFields

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | INT_LIT _ -> 1 
  | STRING_LIT _ -> 2 
  | ID _ -> 3 
  | PLUS  -> 4 
  | MINUS  -> 5 
  | TIMES  -> 6 
  | DIV  -> 7 
  | ASSIGN  -> 8 
  | EQ  -> 9 
  | NEQ  -> 10 
  | GTEQ  -> 11 
  | LTEQ  -> 12 
  | GT  -> 13 
  | LT  -> 14 
  | AND  -> 15 
  | OR  -> 16 
  | LPAREN  -> 17 
  | RPAREN  -> 18 
  | LBRACE  -> 19 
  | RBRACE  -> 20 
  | LBRACKET  -> 21 
  | RBRACKET  -> 22 
  | DOT  -> 23 
  | COMMA  -> 24 
  | COLON  -> 25 
  | SEMI  -> 26 
  | TYPE  -> 27 
  | VAR  -> 28 
  | FUNCTION  -> 29 
  | INT  -> 30 
  | STRING  -> 31 
  | ARRAY  -> 32 
  | OF  -> 33 
  | NIL  -> 34 
  | LET  -> 35 
  | IN  -> 36 
  | END  -> 37 
  | IF  -> 38 
  | THEN  -> 39 
  | ELSE  -> 40 
  | WHILE  -> 41 
  | DO  -> 42 
  | FOR  -> 43 
  | TO  -> 44 
  | BREAK  -> 45 
  | LOWPREC  -> 46 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_INT_LIT 
  | 2 -> TOKEN_STRING_LIT 
  | 3 -> TOKEN_ID 
  | 4 -> TOKEN_PLUS 
  | 5 -> TOKEN_MINUS 
  | 6 -> TOKEN_TIMES 
  | 7 -> TOKEN_DIV 
  | 8 -> TOKEN_ASSIGN 
  | 9 -> TOKEN_EQ 
  | 10 -> TOKEN_NEQ 
  | 11 -> TOKEN_GTEQ 
  | 12 -> TOKEN_LTEQ 
  | 13 -> TOKEN_GT 
  | 14 -> TOKEN_LT 
  | 15 -> TOKEN_AND 
  | 16 -> TOKEN_OR 
  | 17 -> TOKEN_LPAREN 
  | 18 -> TOKEN_RPAREN 
  | 19 -> TOKEN_LBRACE 
  | 20 -> TOKEN_RBRACE 
  | 21 -> TOKEN_LBRACKET 
  | 22 -> TOKEN_RBRACKET 
  | 23 -> TOKEN_DOT 
  | 24 -> TOKEN_COMMA 
  | 25 -> TOKEN_COLON 
  | 26 -> TOKEN_SEMI 
  | 27 -> TOKEN_TYPE 
  | 28 -> TOKEN_VAR 
  | 29 -> TOKEN_FUNCTION 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_STRING 
  | 32 -> TOKEN_ARRAY 
  | 33 -> TOKEN_OF 
  | 34 -> TOKEN_NIL 
  | 35 -> TOKEN_LET 
  | 36 -> TOKEN_IN 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_IF 
  | 39 -> TOKEN_THEN 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_WHILE 
  | 42 -> TOKEN_DO 
  | 43 -> TOKEN_FOR 
  | 44 -> TOKEN_TO 
  | 45 -> TOKEN_BREAK 
  | 46 -> TOKEN_LOWPREC 
  | 49 -> TOKEN_end_of_input
  | 47 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Oper 
    | 3 -> NONTERM_Oper 
    | 4 -> NONTERM_Oper 
    | 5 -> NONTERM_Oper 
    | 6 -> NONTERM_Oper 
    | 7 -> NONTERM_Oper 
    | 8 -> NONTERM_Oper 
    | 9 -> NONTERM_Oper 
    | 10 -> NONTERM_Oper 
    | 11 -> NONTERM_Oper 
    | 12 -> NONTERM_TypeId 
    | 13 -> NONTERM_TypeId 
    | 14 -> NONTERM_TypeId 
    | 15 -> NONTERM_Var 
    | 16 -> NONTERM_Var 
    | 17 -> NONTERM_ComplexVar 
    | 18 -> NONTERM_ComplexVar 
    | 19 -> NONTERM_ComplexVar 
    | 20 -> NONTERM_Exp 
    | 21 -> NONTERM_Exp 
    | 22 -> NONTERM_Exp 
    | 23 -> NONTERM_Exp 
    | 24 -> NONTERM_Exp 
    | 25 -> NONTERM_Exp 
    | 26 -> NONTERM_Exp 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_Exp 
    | 35 -> NONTERM_Exp 
    | 36 -> NONTERM_Exp 
    | 37 -> NONTERM_Exp 
    | 38 -> NONTERM_Exp 
    | 39 -> NONTERM_Exp 
    | 40 -> NONTERM_Exp 
    | 41 -> NONTERM_SeqExp 
    | 42 -> NONTERM_SeqExp 
    | 43 -> NONTERM_SeqExp 
    | 44 -> NONTERM_ExpList 
    | 45 -> NONTERM_ExpList 
    | 46 -> NONTERM_ExpList 
    | 47 -> NONTERM_RecordFieldList 
    | 48 -> NONTERM_RecordFieldList 
    | 49 -> NONTERM_RecordFieldList 
    | 50 -> NONTERM_Dec 
    | 51 -> NONTERM_Dec 
    | 52 -> NONTERM_Dec 
    | 53 -> NONTERM_DecList 
    | 54 -> NONTERM_DecList 
    | 55 -> NONTERM_FunDec 
    | 56 -> NONTERM_FunDec 
    | 57 -> NONTERM_FunDecs 
    | 58 -> NONTERM_FunDecs 
    | 59 -> NONTERM_VarDec 
    | 60 -> NONTERM_VarDec 
    | 61 -> NONTERM_TypeDec 
    | 62 -> NONTERM_TypeDecs 
    | 63 -> NONTERM_TypeDecs 
    | 64 -> NONTERM_Ty 
    | 65 -> NONTERM_Ty 
    | 66 -> NONTERM_Ty 
    | 67 -> NONTERM_TypeFields 
    | 68 -> NONTERM_TypeFields 
    | 69 -> NONTERM_TypeFields 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 49 
let _fsyacc_tagOfErrorTerminal = 47

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | INT_LIT _ -> "INT_LIT" 
  | STRING_LIT _ -> "STRING_LIT" 
  | ID _ -> "ID" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | GTEQ  -> "GTEQ" 
  | LTEQ  -> "LTEQ" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMI  -> "SEMI" 
  | TYPE  -> "TYPE" 
  | VAR  -> "VAR" 
  | FUNCTION  -> "FUNCTION" 
  | INT  -> "INT" 
  | STRING  -> "STRING" 
  | ARRAY  -> "ARRAY" 
  | OF  -> "OF" 
  | NIL  -> "NIL" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | BREAK  -> "BREAK" 
  | LOWPREC  -> "LOWPREC" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | INT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GTEQ  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | LOWPREC  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 29us; 65535us; 2us; 62us; 23us; 62us; 26us; 62us; 30us; 62us; 37us; 62us; 38us; 62us; 39us; 62us; 40us; 62us; 41us; 62us; 42us; 62us; 43us; 62us; 44us; 62us; 45us; 62us; 46us; 62us; 47us; 62us; 48us; 62us; 49us; 62us; 50us; 62us; 51us; 62us; 52us; 62us; 53us; 62us; 54us; 62us; 55us; 62us; 56us; 62us; 57us; 62us; 58us; 62us; 59us; 62us; 60us; 62us; 61us; 62us; 6us; 65535us; 108us; 109us; 116us; 117us; 121us; 125us; 130us; 131us; 133us; 134us; 137us; 138us; 29us; 65535us; 0us; 19us; 22us; 19us; 25us; 19us; 29us; 19us; 34us; 19us; 62us; 19us; 63us; 19us; 64us; 19us; 65us; 19us; 72us; 19us; 73us; 19us; 74us; 19us; 75us; 19us; 76us; 19us; 77us; 19us; 80us; 19us; 81us; 19us; 82us; 19us; 86us; 19us; 88us; 19us; 89us; 19us; 90us; 19us; 91us; 19us; 93us; 19us; 96us; 19us; 107us; 19us; 110us; 19us; 115us; 19us; 118us; 19us; 29us; 65535us; 0us; 18us; 22us; 18us; 25us; 18us; 29us; 18us; 34us; 18us; 62us; 18us; 63us; 18us; 64us; 18us; 65us; 18us; 72us; 18us; 73us; 18us; 74us; 18us; 75us; 18us; 76us; 18us; 77us; 18us; 80us; 18us; 81us; 18us; 82us; 18us; 86us; 18us; 88us; 18us; 89us; 18us; 90us; 18us; 91us; 18us; 93us; 18us; 96us; 18us; 107us; 18us; 110us; 18us; 115us; 18us; 118us; 18us; 29us; 65535us; 0us; 2us; 22us; 23us; 25us; 26us; 29us; 30us; 34us; 54us; 62us; 37us; 63us; 38us; 64us; 39us; 65us; 40us; 72us; 41us; 73us; 42us; 74us; 43us; 75us; 44us; 76us; 45us; 77us; 46us; 80us; 47us; 81us; 48us; 82us; 49us; 86us; 50us; 88us; 51us; 89us; 52us; 90us; 53us; 91us; 55us; 93us; 56us; 96us; 57us; 107us; 58us; 110us; 59us; 115us; 60us; 118us; 61us; 1us; 65535us; 29us; 70us; 1us; 65535us; 34us; 35us; 1us; 65535us; 66us; 67us; 2us; 65535us; 84us; 100us; 85us; 101us; 1us; 65535us; 84us; 85us; 3us; 65535us; 84us; 111us; 85us; 111us; 97us; 112us; 2us; 65535us; 84us; 97us; 85us; 97us; 2us; 65535us; 84us; 98us; 85us; 98us; 3us; 65535us; 84us; 123us; 85us; 123us; 99us; 124us; 2us; 65535us; 84us; 99us; 85us; 99us; 1us; 65535us; 121us; 122us; 2us; 65535us; 104us; 105us; 126us; 127us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 33us; 40us; 70us; 100us; 130us; 132us; 134us; 136us; 139us; 141us; 145us; 148us; 151us; 155us; 158us; 160us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 26us; 27us; 28us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 6us; 15us; 18us; 25us; 30us; 31us; 40us; 2us; 16us; 19us; 3us; 17us; 20us; 33us; 1us; 17us; 1us; 17us; 2us; 18us; 40us; 5us; 18us; 26us; 27us; 28us; 40us; 2us; 18us; 40us; 1us; 19us; 4us; 19us; 26us; 27us; 28us; 1us; 19us; 1us; 21us; 2us; 22us; 32us; 5us; 22us; 26us; 27us; 28us; 42us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 25us; 46us; 1us; 25us; 4us; 26us; 26us; 27us; 28us; 4us; 26us; 27us; 27us; 28us; 4us; 26us; 27us; 28us; 28us; 4us; 26us; 27us; 28us; 29us; 4us; 26us; 27us; 28us; 33us; 5us; 26us; 27us; 28us; 34us; 35us; 5us; 26us; 27us; 28us; 34us; 35us; 4us; 26us; 27us; 28us; 34us; 4us; 26us; 27us; 28us; 36us; 4us; 26us; 27us; 28us; 36us; 4us; 26us; 27us; 28us; 37us; 4us; 26us; 27us; 28us; 37us; 4us; 26us; 27us; 28us; 37us; 4us; 26us; 27us; 28us; 39us; 4us; 26us; 27us; 28us; 40us; 4us; 26us; 27us; 28us; 42us; 4us; 26us; 27us; 28us; 43us; 4us; 26us; 27us; 28us; 45us; 4us; 26us; 27us; 28us; 46us; 4us; 26us; 27us; 28us; 48us; 4us; 26us; 27us; 28us; 49us; 4us; 26us; 27us; 28us; 55us; 4us; 26us; 27us; 28us; 56us; 4us; 26us; 27us; 28us; 59us; 4us; 26us; 27us; 28us; 60us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 2us; 30us; 49us; 1us; 30us; 1us; 31us; 2us; 32us; 43us; 1us; 32us; 1us; 33us; 2us; 34us; 35us; 2us; 34us; 35us; 1us; 34us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 2us; 39us; 54us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 42us; 1us; 43us; 1us; 46us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 2us; 50us; 58us; 1us; 51us; 2us; 52us; 63us; 1us; 53us; 1us; 54us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 3us; 55us; 56us; 69us; 2us; 55us; 56us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 59us; 60us; 2us; 59us; 60us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 2us; 65us; 69us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 69us; 1us; 69us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 44us; 47us; 51us; 53us; 55us; 58us; 64us; 67us; 69us; 74us; 76us; 78us; 81us; 87us; 89us; 91us; 93us; 95us; 98us; 100us; 105us; 110us; 115us; 120us; 125us; 131us; 137us; 142us; 147us; 152us; 157us; 162us; 167us; 172us; 177us; 182us; 187us; 192us; 197us; 202us; 207us; 212us; 217us; 222us; 227us; 229us; 231us; 233us; 235us; 237us; 240us; 242us; 244us; 247us; 249us; 251us; 254us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 305us; 307us; 310us; 312us; 314us; 317us; 320us; 323us; 327us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 345us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; |]
let _fsyacc_action_rows = 139
let _fsyacc_actionTableElements = [|11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 0us; 49152us; 13us; 32768us; 0us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 4us; 16399us; 17us; 34us; 19us; 66us; 21us; 22us; 34us; 69us; 1us; 16400us; 21us; 25us; 2us; 16404us; 8us; 72us; 23us; 20us; 1us; 32768us; 3us; 21us; 0us; 16401us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 22us; 24us; 1us; 16402us; 33us; 88us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 22us; 27us; 0us; 16403us; 0us; 16405us; 11us; 16425us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 14us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 18us; 31us; 26us; 89us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 11us; 16428us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 2us; 32768us; 18us; 36us; 24us; 91us; 0us; 16409us; 2us; 16410us; 6us; 6us; 7us; 7us; 2us; 16411us; 6us; 6us; 7us; 7us; 2us; 16412us; 6us; 6us; 7us; 7us; 0us; 16413us; 12us; 16417us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 39us; 74us; 1us; 16419us; 40us; 75us; 0us; 16418us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 42us; 77us; 0us; 16420us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 44us; 81us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 42us; 82us; 0us; 16421us; 13us; 32768us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 37us; 87us; 12us; 16424us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16426us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16427us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16429us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16430us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16432us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16433us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16439us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16440us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16443us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 12us; 16444us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 9us; 8us; 10us; 9us; 11us; 13us; 12us; 11us; 13us; 12us; 14us; 10us; 15us; 63us; 16us; 64us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 16431us; 3us; 92us; 2us; 32768us; 20us; 68us; 24us; 94us; 0us; 16414us; 0us; 16415us; 2us; 32768us; 18us; 71us; 26us; 90us; 0us; 16416us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 32768us; 3us; 79us; 1us; 32768us; 8us; 80us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 0us; 16422us; 3us; 32768us; 27us; 119us; 28us; 113us; 29us; 102us; 4us; 32768us; 27us; 119us; 28us; 113us; 29us; 102us; 36us; 86us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 0us; 16423us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 32768us; 9us; 93us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 32768us; 3us; 95us; 1us; 32768us; 9us; 96us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 16434us; 29us; 102us; 0us; 16435us; 1us; 16436us; 27us; 119us; 0us; 16437us; 0us; 16438us; 1us; 32768us; 3us; 103us; 1us; 32768us; 17us; 104us; 1us; 16451us; 3us; 132us; 2us; 32768us; 18us; 106us; 24us; 135us; 2us; 32768us; 9us; 107us; 25us; 108us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 3us; 32768us; 3us; 14us; 30us; 15us; 31us; 16us; 1us; 32768us; 9us; 110us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 0us; 16441us; 0us; 16442us; 1us; 32768us; 3us; 114us; 2us; 32768us; 8us; 115us; 25us; 116us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 3us; 32768us; 3us; 14us; 30us; 15us; 31us; 16us; 1us; 32768us; 8us; 118us; 11us; 32768us; 1us; 32us; 2us; 33us; 3us; 17us; 5us; 65us; 17us; 29us; 34us; 28us; 35us; 84us; 38us; 73us; 41us; 76us; 43us; 78us; 45us; 83us; 1us; 32768us; 3us; 120us; 1us; 32768us; 9us; 121us; 5us; 32768us; 3us; 14us; 19us; 126us; 30us; 15us; 31us; 16us; 32us; 129us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 1us; 16451us; 3us; 132us; 2us; 32768us; 20us; 128us; 24us; 135us; 0us; 16449us; 1us; 32768us; 33us; 130us; 3us; 32768us; 3us; 14us; 30us; 15us; 31us; 16us; 0us; 16450us; 1us; 32768us; 25us; 133us; 3us; 32768us; 3us; 14us; 30us; 15us; 31us; 16us; 0us; 16452us; 1us; 32768us; 3us; 136us; 1us; 32768us; 25us; 137us; 3us; 32768us; 3us; 14us; 30us; 15us; 31us; 16us; 0us; 16453us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 46us; 48us; 51us; 53us; 54us; 66us; 80us; 82us; 94us; 108us; 109us; 110us; 122us; 137us; 138us; 139us; 140us; 152us; 155us; 156us; 159us; 162us; 165us; 166us; 179us; 193us; 195us; 196us; 210us; 211us; 225us; 239us; 240us; 254us; 267us; 280us; 293us; 306us; 319us; 332us; 345us; 358us; 371us; 384us; 397us; 409us; 421us; 433us; 445us; 447us; 450us; 451us; 452us; 455us; 456us; 468us; 480us; 492us; 504us; 516us; 528us; 530us; 532us; 544us; 556us; 568us; 569us; 573us; 578us; 590us; 591us; 603us; 615us; 627us; 639us; 641us; 653us; 655us; 657us; 669us; 671us; 672us; 674us; 675us; 676us; 678us; 680us; 682us; 685us; 688us; 700us; 704us; 706us; 718us; 719us; 720us; 722us; 725us; 737us; 741us; 743us; 755us; 757us; 759us; 765us; 766us; 767us; 768us; 769us; 771us; 774us; 775us; 777us; 781us; 782us; 784us; 788us; 789us; 791us; 793us; 797us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 4us; 1us; 1us; 3us; 1us; 1us; 4us; 3us; 3us; 3us; 2us; 4us; 2us; 3us; 3us; 6us; 4us; 4us; 8us; 1us; 5us; 6us; 0us; 3us; 3us; 0us; 1us; 3us; 0us; 3us; 5us; 1us; 1us; 1us; 1us; 2us; 7us; 9us; 1us; 2us; 4us; 6us; 4us; 1us; 2us; 1us; 3us; 3us; 0us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16405us; 65535us; 65535us; 16406us; 16407us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 16437us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16441us; 16442us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 16446us; 16447us; 16448us; 65535us; 65535us; 16449us; 65535us; 65535us; 16450us; 65535us; 65535us; 16452us; 65535us; 65535us; 65535us; 16453us; |]
let _fsyacc_reductions ()  =    [| 
# 430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Exp )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 439 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                      _1 
                   )
# 33 "Parser.fsy"
                 :  Ast.Exp ));
# 450 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                  PlusOp 
                   )
# 35 "Parser.fsy"
                 : 'Oper));
# 460 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                   MinusOp 
                   )
# 36 "Parser.fsy"
                 : 'Oper));
# 470 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                   TimesOp 
                   )
# 37 "Parser.fsy"
                 : 'Oper));
# 480 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                 DivideOp 
                   )
# 38 "Parser.fsy"
                 : 'Oper));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                EqOp 
                   )
# 39 "Parser.fsy"
                 : 'Oper));
# 500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                 NeqOp 
                   )
# 40 "Parser.fsy"
                 : 'Oper));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                LtOp 
                   )
# 41 "Parser.fsy"
                 : 'Oper));
# 520 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                  LeOp 
                   )
# 42 "Parser.fsy"
                 : 'Oper));
# 530 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                GtOp 
                   )
# 43 "Parser.fsy"
                 : 'Oper));
# 540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                  GeOp 
                   )
# 44 "Parser.fsy"
                 : 'Oper));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                  symbol _1 
                   )
# 46 "Parser.fsy"
                 : 'TypeId));
# 561 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                   symbol "int" 
                   )
# 47 "Parser.fsy"
                 : 'TypeId));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                      symbol "string" 
                   )
# 48 "Parser.fsy"
                 : 'TypeId));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                               SimpleVar(symbol _1, parseState.InputStartPosition 1) 
                   )
# 50 "Parser.fsy"
                 : 'Var));
# 592 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ComplexVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                       _1 
                   )
# 51 "Parser.fsy"
                 : 'Var));
# 603 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                               FieldVar(_1, symbol _3, parseState.InputStartPosition 2) 
                   )
# 53 "Parser.fsy"
                 : 'ComplexVar));
# 615 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                             SubscriptVar(SimpleVar(symbol _1, parseState.InputStartPosition 1), _3, parseState.InputStartPosition 2) 
                   )
# 54 "Parser.fsy"
                 : 'ComplexVar));
# 627 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ComplexVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                     SubscriptVar(_1, _3, parseState.InputStartPosition 2) 
                   )
# 55 "Parser.fsy"
                 : 'ComplexVar));
# 639 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                VarExp(_1) 
                   )
# 57 "Parser.fsy"
                 : 'Exp));
# 650 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                NilExp 
                   )
# 58 "Parser.fsy"
                 : 'Exp));
# 660 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                              _2 
                   )
# 59 "Parser.fsy"
                 : 'Exp));
# 671 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                    IntExp(_1) 
                   )
# 60 "Parser.fsy"
                 : 'Exp));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                       StringExp(_1, parseState.InputStartPosition 1) 
                   )
# 61 "Parser.fsy"
                 : 'Exp));
# 693 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                     CallExp(symbol _1, List.rev(_3), parseState.InputStartPosition 1) 
                   )
# 62 "Parser.fsy"
                 : 'Exp));
# 705 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Oper)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                    OpExp(_1, _2, _3, parseState.InputStartPosition 2) 
                   )
# 63 "Parser.fsy"
                 : 'Exp));
# 718 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                   IfExp(_1, _3, Some (IntExp(0)), parseState.InputStartPosition 2) 
                   )
# 64 "Parser.fsy"
                 : 'Exp));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                  IfExp(_1, IntExp(1), Some _3, parseState.InputStartPosition 2) 
                   )
# 65 "Parser.fsy"
                 : 'Exp));
# 742 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                  OpExp(IntExp(0), MinusOp, _2, parseState.InputStartPosition 1) 
                   )
# 66 "Parser.fsy"
                 : 'Exp));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RecordFieldList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                             RecordExp(List.rev(_3), symbol _1, parseState.InputStartPosition 1) 
                   )
# 67 "Parser.fsy"
                 : 'Exp));
# 765 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                   RecordExp([], symbol _1, parseState.InputStartPosition 1) 
                   )
# 68 "Parser.fsy"
                 : 'Exp));
# 776 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'SeqExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                 SeqExp(List.rev(_2)) 
                   )
# 69 "Parser.fsy"
                 : 'Exp));
# 787 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                           AssignExp(_1, _3, parseState.InputStartPosition 2) 
                   )
# 70 "Parser.fsy"
                 : 'Exp));
# 799 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                     IfExp(_2, _4, Some _6, parseState.InputStartPosition 1) 
                   )
# 71 "Parser.fsy"
                 : 'Exp));
# 812 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                            IfExp(_2, _4, None, parseState.InputStartPosition 1) 
                   )
# 72 "Parser.fsy"
                 : 'Exp));
# 824 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                             WhileExp(_2, _4, parseState.InputStartPosition 1) 
                   )
# 73 "Parser.fsy"
                 : 'Exp));
# 836 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                            ForExp(symbol _2, ref true, _4, _6, _8, parseState.InputStartPosition 1) 
                   )
# 74 "Parser.fsy"
                 : 'Exp));
# 850 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                  BreakExp(parseState.InputStartPosition 1) 
                   )
# 75 "Parser.fsy"
                 : 'Exp));
# 860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DecList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                   LetExp(List.rev(_2), _4, parseState.InputStartPosition 1) 
                   )
# 76 "Parser.fsy"
                 : 'Exp));
# 872 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                                         ArrayExp(symbol _1, _3, _6, parseState.InputStartPosition 1) 
                   )
# 77 "Parser.fsy"
                 : 'Exp));
# 885 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                               [] 
                   )
# 79 "Parser.fsy"
                 : 'SeqExp));
# 895 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                            [(_3, parseState.InputStartPosition 3) ; (_1, parseState.InputStartPosition 1)] 
                   )
# 80 "Parser.fsy"
                 : 'SeqExp));
# 907 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SeqExp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                               (_3, parseState.InputStartPosition 3) :: _1 
                   )
# 81 "Parser.fsy"
                 : 'SeqExp));
# 919 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                [] 
                   )
# 83 "Parser.fsy"
                 : 'ExpList));
# 929 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                    [_1] 
                   )
# 84 "Parser.fsy"
                 : 'ExpList));
# 940 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                  _3 :: _1 
                   )
# 85 "Parser.fsy"
                 : 'ExpList));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                        [] 
                   )
# 87 "Parser.fsy"
                 : 'RecordFieldList));
# 962 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                  [(symbol _1, _3, parseState.InputStartPosition 2)] 
                   )
# 88 "Parser.fsy"
                 : 'RecordFieldList));
# 974 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RecordFieldList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                        (symbol _3, _5, parseState.InputStartPosition 4) :: _1 
                   )
# 89 "Parser.fsy"
                 : 'RecordFieldList));
# 987 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                    FunDec(List.rev(_1)) 
                   )
# 91 "Parser.fsy"
                 : 'Dec));
# 998 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                   _1 
                   )
# 92 "Parser.fsy"
                 : 'Dec));
# 1009 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeDecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                     TypeDec(List.rev(_1)) 
                   )
# 93 "Parser.fsy"
                 : 'Dec));
# 1020 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                    [_1] 
                   )
# 95 "Parser.fsy"
                 : 'DecList));
# 1031 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DecList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                            _2 :: _1 
                   )
# 96 "Parser.fsy"
                 : 'DecList));
# 1043 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                           { FunName = symbol _2 ; Params = List.rev(_4) ; Result = None ; Body = _7 ; Pos = parseState.InputStartPosition 1 } 
                   )
# 98 "Parser.fsy"
                 : 'FunDec));
# 1056 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                                        { FunName = symbol _2 ; Params = List.rev(_4) ; Result = Some (_7, parseState.InputStartPosition 7) ; Body = _9 ; Pos = parseState.InputStartPosition 1 } 
                   )
# 99 "Parser.fsy"
                 : 'FunDec));
# 1070 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                       [_1] 
                   )
# 101 "Parser.fsy"
                 : 'FunDecs));
# 1081 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDecs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                               _2 :: _1 
                   )
# 102 "Parser.fsy"
                 : 'FunDecs));
# 1093 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                 VarDec(symbol _2, ref true, None, _4, parseState.InputStartPosition 1) 
                   )
# 104 "Parser.fsy"
                 : 'VarDec));
# 1105 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                              VarDec(symbol _2, ref true, Some (_4, parseState.InputStartPosition 4), _6, parseState.InputStartPosition 1) 
                   )
# 105 "Parser.fsy"
                 : 'VarDec));
# 1118 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                              { TypeName = symbol _2 ; Ty = _4 ; Pos = parseState.InputStartPosition 1 } 
                   )
# 107 "Parser.fsy"
                 : 'TypeDec));
# 1130 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                         [_1] 
                   )
# 109 "Parser.fsy"
                 : 'TypeDecs));
# 1141 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeDecs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                  _2 :: _1 
                   )
# 110 "Parser.fsy"
                 : 'TypeDecs));
# 1153 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                  NameTy(_1, parseState.InputStartPosition 1) 
                   )
# 112 "Parser.fsy"
                 : 'Ty));
# 1164 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                    RecordTy(List.rev(_2)) 
                   )
# 113 "Parser.fsy"
                 : 'Ty));
# 1175 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                           ArrayTy(_3, parseState.InputStartPosition 1) 
                   )
# 114 "Parser.fsy"
                 : 'Ty));
# 1186 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                    [] 
                   )
# 116 "Parser.fsy"
                 : 'TypeFields));
# 1196 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                    [{ FieldName = symbol _1 ; Escape = ref true ; Typ = _3 ; Pos = parseState.InputStartPosition 2 }] 
                   )
# 117 "Parser.fsy"
                 : 'TypeFields));
# 1208 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFields)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                     { FieldName = symbol _3 ; Escape = ref true ; Typ = _5 ; Pos = parseState.InputStartPosition 2 } :: _1 
                   )
# 118 "Parser.fsy"
                 : 'TypeFields));
|]
# 1222 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 50;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Ast.Exp  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
