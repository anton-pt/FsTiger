{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing

open Token
open System
open System.Text

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme = LexBuffer<_>.LexemeString

}

// Regular expressions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let ident = ['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '_' '0'-'9']*
let strFmt = '\\' [' ' '\t' '\r' '\n']+ '\\'
let strChar = [ ^ '\n' '\t' '\r' '\"' ]
let asciiChar = '\\'(digit)(digit)(digit)

rule token = parse
| whitespace     { token lexbuf }
| newline        { newline lexbuf; token lexbuf }
| "/*"           { comment 0 lexbuf }
| "type"         { KEYW TYPE }
| "var"          { KEYW VAR }
| "function"     { KEYW FUNCTION }
| "int"          { KEYW INT }
| "string"       { KEYW STRING }
| "array"        { KEYW ARRAY }
| "of"           { KEYW OF }
| "nil"          { KEYW NIL }
| "let"          { KEYW LET }
| "in"           { KEYW IN }
| "end"          { KEYW END }
| "if"           { KEYW IF }
| "then"         { KEYW THEN }
| "else"         { KEYW ELSE }
| "while"        { KEYW WHILE }
| "do"           { KEYW DO }
| "for"          { KEYW FOR }
| "to"           { KEYW TO }
| "break"        { KEYW BREAK }
| ident          { ID (lexeme lexbuf) }
| "\""           { strLitToken (StringBuilder()) lexbuf }
| ['-']?digit+   { INT_LIT (Int32.Parse(lexeme lexbuf)) }
| '*'            { OP TIMES }
| '/'            { OP DIV }
| '+'            { OP PLUS }
| '-'            { OP MINUS }
| ":="           { OP ASSIGN }
| '='            { OP EQ }
| "<>"           { OP NEQ }
| ">="           { OP GTEQ }
| "<="           { OP LTEQ }
| '>'            { OP GT }
| '<'            { OP LT }
| '&'            { OP AND }
| '|'            { OP OR }
| '('            { PUNCT LPAREN }
| ')'            { PUNCT RPAREN }
| '{'            { PUNCT LBRACE }
| '}'            { PUNCT RBRACE }
| '['            { PUNCT LBRACKET }
| ']'            { PUNCT RBRACKET }
| '.'            { PUNCT DOT }
| ','            { PUNCT COMMA }
| ':'            { PUNCT COLON }
| ';'            { PUNCT SEMICOLON }
| eof            { EOF }
and strLitToken sb = parse
| strFmt         { strLitToken sb lexbuf }
| "\\n"          { strLitToken (sb.Append('\n')) lexbuf }
| "\\t"          { strLitToken (sb.Append('\t')) lexbuf }
| asciiChar      { strLitToken (sb.Append(Convert.ToChar(Int32.Parse((lexeme lexbuf).Substring(1))))) lexbuf }
| "\\\""         { strLitToken (sb.Append('\"')) lexbuf }
| "\\\\"         { strLitToken (sb.Append('\\')) lexbuf }
| '\\'           { failwith "unexpected character" }
| strChar+       { strLitToken (sb.Append(lexeme lexbuf)) lexbuf }
| '\"'           { STRING_LIT (sb.ToString()) }
and comment depth = parse
| "/*"           { comment (depth + 1) lexbuf }
| "*/"           { if (depth = 0) then token lexbuf else comment (depth - 1) lexbuf }
| _              { comment depth lexbuf }