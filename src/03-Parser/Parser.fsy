%{
open Ast
%}

%start start
%token TYPE VAR FUNCTION INT STRING ARRAY OF NIL LET IN END IF THEN ELSE WHILE DO FOR TO BREAK
%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET DOT COMMA COLON SEMI
%token PLUS MINUS TIMES DIV ASSIGN EQ NEQ GTEQ LTEQ GT LT AND OR
%token <string> ID
%token <string> STRING_LIT
%token <System.Int32> INT_LIT
%token EOF
%type < Ast.Expr > start

%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GTEQ LTEQ GT LT
%left PLUS MINUS
%left TIMES DIV

%nonassoc THEN
%nonassoc ELSE
%nonassoc DO

%%

start: Expr EOF { $1 }

ArithmeticOp: PLUS { PlusOp }
            | MINUS { MinusOp }
            | TIMES { TimesOp }
            | DIV { DivOp }

ComparisonOp: EQ { EqualsOp }
            | NEQ { NotEqualsOp }
            | GT { GreaterThanOp }
            | LT { LessThanOp }
            | GTEQ { GreaterThanOrEqualsOp }
            | LTEQ { LessThanOrEqualsOp }
            
LogicOp: AND { AndOp }
       | OR { OrOp }

LValue: ID { LId($1) }
      | LValueNotId { $1 }

LValueNotId : LValue DOT ID { LProperty($1, $3) }
            | ID LBRACKET Expr RBRACKET { LArrayElem(LId($1), $3) }
            | LValueNotId LBRACKET Expr RBRACKET { LArrayElem($1, $3) }
      
TypeId: ID { $1 }
      | INT { "int" }
      | STRING { "string" }

Expr: NIL { NilExpr }
    | LValue { EvalExpr($1) }
    | LPAREN RPAREN { UnitExpr }
    | LPAREN Expr RPAREN { $2 }
    | LPAREN ExprSeq RPAREN { ExprSeqExpr(List.rev($2)) }
    | INT_LIT { IntLiteralExpr($1) }
    | STRING_LIT { StringLiteralExpr($1) }
    | ID LPAREN ExprList RPAREN { FunctionCallExpr($1, List.rev($3)) }
    | MINUS Expr %prec TIMES { NegationExpr($2) }
    | Expr ArithmeticOp Expr %prec PLUS { ArithmeticExpr($1, $2, $3) }
    | Expr ComparisonOp Expr %prec PLUS { ComparisonExpr($1, $2, $3) }
    | Expr LogicOp Expr %prec OR { LogicExpr($1, $2, $3) }
    | LValue ASSIGN Expr { AssignmentExpr($1, $3) }
    | ID LBRACE FieldAssgmtList RBRACE { RecordCreationExpr($1, List.rev($3)) }
    | ID LBRACKET Expr RBRACKET OF Expr %prec ASSIGN { ArrayCreationExpr($1, $3, $6) }
    | IF Expr THEN Expr ELSE Expr { IfThenExpr($2, $4, Some $6) }
    | IF Expr THEN Expr { IfThenExpr($2, $4, None) }
    | WHILE Expr DO Expr { WhileDoExpr($2, $4) }
    | FOR ID ASSIGN Expr TO Expr DO Expr { ForDoExpr($2, $4, $6, $8) }
    | BREAK { BreakExpr }
    | LET DecList IN Expr END { LetInExpr(List.rev($2), $4) }
    
ExprSeq: Expr SEMI Expr { [$1 ; $3] }
       | Expr SEMI ExprSeq { $1 :: $3 }

ExprList: { [] }
        | Expr { [$1] }
        | ExprList COMMA Expr { $3 :: $1 }
        
FieldAssgmtList: { [] }
               | ID EQ Expr { [($1, $3)] }
               | FieldAssgmtList COMMA ID EQ Expr { ($3, $5) :: $1 }

Dec: TypeDec { TDec($1) }
   | VarDec { VDec($1) }
   | FunDec { FDec($1) }
   
DecList: Dec { [$1] }
       | DecList Dec { $2 :: $1 }
   
TypeDef: ID { TypeAliasDef($1) }
       | LBRACE TypeFields RBRACE { RecordTypeDef(List.rev($2)) }
       | ARRAY OF TypeId { ArrayTypeDef($3) }

TypeFields : { [] }
           | ID COLON TypeId { [($1, $3)] }
           | TypeFields COMMA ID COLON TypeId { ($3, $5) :: $1 }
           
TypeDec: TYPE ID EQ TypeDef { TypeDec($2, $4) }

VarDec: VAR ID ASSIGN Expr { VarDec($2, $4) }
      | VAR ID COLON TypeId ASSIGN Expr { VarDecWithType($2, $4, $6) }

FunDec: FUNCTION ID LPAREN TypeFields RPAREN EQ Expr { FunDec($2, List.rev($4), $7) }
      | FUNCTION ID LPAREN TypeFields RPAREN COLON TypeId EQ Expr { FunDecWithType($2, List.rev($4), $7, $9) }
      